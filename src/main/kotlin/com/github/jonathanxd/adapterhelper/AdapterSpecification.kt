/**
 *      AdapterHelper - Adapter management helper. <https://github.com/JonathanxD/AdapterHelper>
 *
 *         The MIT License (MIT)
 *
 *      Copyright (c) 2018 TheRealBuggy/JonathanxD (https://github.com/JonathanxD/ & https://github.com/TheRealBuggy/) <jonathan.scripter@programmer.net>
 *      Copyright (c) contributors
 *
 *
 *      Permission is hereby granted, free of charge, to any person obtaining a copy
 *      of this software and associated documentation files (the "Software"), to deal
 *      in the Software without restriction, including without limitation the rights
 *      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *      copies of the Software, and to permit persons to whom the Software is
 *      furnished to do so, subject to the following conditions:
 *
 *      The above copyright notice and this permission notice shall be included in
 *      all copies or substantial portions of the Software.
 *
 *      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *      OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *      THE SOFTWARE.
 */
package com.github.jonathanxd.adapterhelper

import com.github.jonathanxd.adapterhelper.implgen.AdapterImplGen
import java.util.Objects

/**
 * Specification of adapter class.
 *
 * The specification can be constructed directly or generated based in an adapter interface.
 *
 * ## Adapter Interfaces
 *
 * An Adapter Interface is a interface that implements all methods and do all the work needed to adapt [adapterClass]
 * methods to [adapteeClass] methods, the interface commonly delegates the call to [adapteeClass].
 * These interfaces does not need to override methods of [Adapter] and [AdapterBase], this is made by
 * the generator, the generated implementation does not use proxies, so the performance is better than proxies.
 * By default, the generated class only have two fields: `originalInstance` and `adapterManager`, but more fields
 * can be added using `Field` annotation, and the access can be made through getter methods, which will be implemented
 * by the generator, so the method can be abstract, also, field can be added by `AdditionalHandlers`.
 * If you forget to implement a required method (those that the body is not generated by generator),
 * a runtime exception will be thrown.
 *
 * Attention: A new class is generated for every call to [createFromInterface].
 *
 * @property factory Adapter Instance Factory.
 * @property adapterClass Adapter class.
 * @property adapteeClass Adaptee class (target class/class to adapt).
 * @param E Adaptee type
 * @param T Adapter type.
 */
class AdapterSpecification<E : Any, T : Any> private constructor(
        val factory: (E, AdapterManager) -> T,
        val adapterClass: Class<T>,
        val adapteeClass: Class<E>) {

    /**
     * True if this adapter [instance] should be strong cached.
     */
    fun strongCache(instance: T) = instance::class.java.hasExplicitOrImplicitAnnotation(StrongCache::class.java)
            && !instance::class.java.hasExplicitOrImplicitAnnotation(ForceWeakCache::class.java)

    /**
     * Create the adapter class instance.
     *
     * @param target  Target instance.
     * @param manager Adapter manager.
     * @return Adapter instance.
     */
    fun create(target: E, manager: AdapterManager): T = this.factory(target, manager)

    override fun hashCode(): Int = Objects.hash(this.adapterClass, this.adapteeClass)

    @Suppress("UNCHECKED_CAST")
    override fun equals(other: Any?): Boolean {

        return !(other == null || other.javaClass != AdapterSpecification::class.java)
                && this.adapterClass == (other as AdapterSpecification<E, T>).adapterClass
                && this.adapteeClass == other.adapteeClass

    }

    companion object {
        /**
         * Create adapter specification.
         *
         * @param factory      Factory function.
         * @param adapterClass Adapter class.
         * @param adapteeClass Adaptee class.
         * @param <T>          Adapter type.
         * @param <E>          Adaptee type.
         * @return Adapter specification.
         */
        @JvmStatic
        fun <E : Any, T : Any> create(factory: (E, AdapterManager) -> T, adapterClass: Class<T>, adapteeClass: Class<E>): AdapterSpecification<E, T>
                = AdapterSpecification(factory, adapterClass, adapteeClass)

        /**
         * Create adapter specification (No generic constraints for [adapterClass]).
         *
         * @param factory      Factory function.
         * @param adapterClass Adapter class.
         * @param adapteeClass Adaptee class.
         * @param <T>          Adapter type.
         * @param <E>          Adaptee type.
         * @return Adapter specification.
         */
        @Suppress("UNCHECKED_CAST")
        @JvmStatic
        fun <E : Any, T : Any> createGeneric(factory: (E, AdapterManager) -> T, adapterClass: Class<*>, adapteeClass: Class<E>): AdapterSpecification<E, T>
                = AdapterSpecification(factory, adapterClass as Class<T>, adapteeClass)

        /**
         * Creates an adapter specification using [AdapterImplGen] to create adapter class.
         *
         * Requires CodeAPI, CodeAPI-BytecodeWriter and CodeGenUtil
         *
         * @param adapterInterface Interface that adapts [adapteeClass], this interface should contains default methods
         * that overrides [adapterClass] methods. Methods of [Adapter] and [AdapterBase] classes are override by generator,
         * so there is no need to override them in the [adapterInterface].
         * @param adapterClass Adapter that defines the adapt standard.
         * @param adapteeClass Adapted class
         * @return Specification.
         */
        @JvmStatic
        fun <E : Any, T : Any> createFromInterface(adapterInterface: Class<out T>,
                                                   adapterClass: Class<T>, adapteeClass: Class<E>): AdapterSpecification<E, T> {
            val ctr = AdapterImplGen.genImpl(adapterInterface, adapteeClass)
                    .getDeclaredConstructor(adapteeClass, AdapterManager::class.java)

            // Don't call createFromInterface variable to keep `ctr` cached out of factory scope.

            return create({ e, manager ->
                @Suppress("UNCHECKED_CAST")
                ctr.newInstance(e, manager)
            }, adapterClass, adapteeClass)
        }

        /**
         * Creates an adapter specification using [AdapterImplGen] to create adapter class.
         *
         * Requires CodeAPI, CodeAPI-BytecodeWriter and CodeGenUtil
         *
         * @param adapterInterface Interface that adapts [adapteeClass], this interface should contains default methods
         * that overrides [adapterClass] methods. Methods of [Adapter] and [AdapterBase] classes are override by generator,
         * so there is no need to override them in the [adapterInterface].
         * @param adapterClass Adapter that defines the adapt standard.
         * @param adapteeClass Adapted class
         * @param factory Factory of instance of generate class.
         * @return Specification.
         */
        @JvmStatic
        fun <E : Any, T : Any> createFromInterface(adapterInterface: Class<out T>,
                                                   adapterClass: Class<T>,
                                                   adapteeClass: Class<E>,
                                                   factory: (genClass: Class<*>, e: E, manager: AdapterManager) -> T): AdapterSpecification<E, T> {
            val klass = AdapterImplGen.genImpl(adapterInterface, adapteeClass)

            return create({ e, manager ->
                factory(klass, e, manager)
            }, adapterClass, adapteeClass)
        }

        /**
         * Create adapter specification.
         *
         * @param factory      Factory function.
         * @param <T>          Adapter type.
         * @param <E>          Adaptee type.
         * @return Adapter specification.
         */
        inline fun <reified E : Any, reified T : Any> create(noinline factory: (E, AdapterManager) -> T): AdapterSpecification<E, T>
                = AdapterSpecification.create(factory, T::class.java, E::class.java)
    }

}